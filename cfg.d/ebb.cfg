[mcu EBBCan]
# serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
canbus_uuid: de2f42d3cb5a

[temperature_sensor chamber_temp]
sensor_type: Generic 3950
sensor_pin: EBBCan: PA2

[extruder]
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: EBBCan: PA3
control: pid
min_temp: 10
min_extrude_temp: 170
max_temp: 270
# https://ellis3dp.com/Print-Tuning-Guide/articles/troubleshooting/small_infill_areas_overextruded.html#things-to-try
pressure_advance_smooth_time: 0.020
max_extrude_only_distance: 101
rotation_distance: 23.132 # latest
gear_ratio: 50:10               #BMG Gear Ratio
microsteps: 32

pwm_cycle_time: 0.02
smooth_time: 0.5
# max_power: 0.8

# Source : https://github.com/Esoterical/voron_canbus/blob/main/toolhead_flashing/common_hardware/BigTreeTech%20SB2209%20and%20SB2240/SB2240%20Stepper%20Configuration%20and%20Undervoltage.md
[tmc2240 extruder]
cs_pin: EBBCan:PA15
#   The pin corresponding to the TMC2240 chip select line. This pin
#   will be set to low at the start of SPI messages and raised to high
#   after the message completes. This parameter must be provided.
spi_speed: 500000
spi_software_sclk_pin: EBBCan:PB10
spi_software_mosi_pin: EBBCan:PB11
spi_software_miso_pin: EBBCan:PB2
#   See the "common SPI settings" section for a description of the
#   above parameters.
#chain_position:
#chain_length:
#   These parameters configure an SPI daisy chain. The two parameters
#   define the stepper position in the chain and the total chain length.
#   Position 1 corresponds to the stepper that connects to the MOSI signal.
#   The default is to not use an SPI daisy chain.
interpolate: False
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
run_current: 0.6
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
# hold_current: 0.12
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. Setting a hold_current is not
#   recommended (see TMC_Drivers.md for details). The default is to
#   not reduce the current.
rref: 12000
#   The resistance (in ohms) of the resistor between IREF and GND. The
#   default is 12000.
stealthchop_threshold: 99999
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
driver_IHOLDDELAY: 8
driver_IRUNDELAY: 2
#driver_TPOWERDOWN: 10
driver_TBL: 3
driver_TOFF: 4
driver_HEND: 3
driver_HSTRT: 4
#driver_FD3: 0
driver_TPFD: 0
##driver_CHM: 0
##driver_VHIGHFS: 0
##driver_VHIGHCHM: 0
##driver_DISS2G: 0
##driver_DISS2VS: 1
driver_PWM_AUTOSCALE: True
driver_PWM_AUTOGRAD: True
#driver_PWM_FREQ: 2
##driver_FREEWHEEL: 0
driver_PWM_GRAD: 12
driver_PWM_OFS: 40
driver_PWM_REG: 15
driver_PWM_LIM: 12
driver_SGT: 30
driver_SEMIN: 2
#driver_SEUP: 3
driver_SEMAX: 8
#driver_SEDN: 2
#driver_SEIMIN: 0
#driver_SFILT: 1
#driver_SG4_ANGLE_OFFSET: 1
#   Set the given register during the configuration of the TMC2240
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
diag0_pin: EBBCan:PB3
#diag1_pin:
#   The micro-controller pin attached to one of the DIAG lines of the
#   TMC2240 chip. Only a single diag pin should be specified. The pin
#   is "active low" and is thus normally prefaced with "^!". Setting
#   this creates a "tmc2240_stepper_x:virtual_endstop" virtual pin
#   which may be used as the stepper's endstop_pin. Doing this enables
#   "sensorless homing". (Be sure to also set driver_SGT to an
#   appropriate sensitivity value.) The default is to not enable
#   sensorless homing.


[fan]
# [fan_generic test_fan]
pin: EBBCan: PA1
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

# [fan_generic test_fan2]
# pin: EBBCan: PA0
# kick_start_time: 0.5
# ##  Depending on your fan, you may need to increase this value
# ##  if your fan will not start. Can change cycle_time (increase)
# ##  if your fan is not able to slow down effectively
# off_below: 0.10

# [heater_fan hotend_fan]
# pin: EBBCan: PA0
# heater: extruder
# heater_temp: 50.0

[heater_fan ebb_hotend_fan]
# pin: EBBCan: PB14 # 4 wire pwm
pin: EBBCan: PA0
# tachometer_pin: EBBCan: PB15
# tachometer_ppr: 1
heater: extruder
heater_temp: 50.0
fan_speed: 0.9

# [neopixel hotend_rgb]
# pin: EBBCan:PD3

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: z,-y,x

[resonance_tester]
accel_chip: adxl345
probe_points:
    150, 150, 20

[gcode_macro configure_extruder]
gcode:
  RESPOND MSG='Configuring SB2240 stepper'
  # Enable accurate stall current measurement
  SET_TMC_FIELD STEPPER=extruder FIELD=pwm_meas_sd_enable VALUE=1
  SET_TMC_FIELD STEPPER=extruder FIELD=sg4_filt_en VALUE=1
  # Set the StealthChop stall detection threshold (may not be completely necessary)
  SET_TMC_FIELD STEPPER=extruder FIELD=SG4_THRS VALUE=10
  # Set the hold current to zero, and completely switch off the motor when it is not in use
  SET_TMC_FIELD STEPPER=extruder FIELD=IHOLD VALUE=0
  SET_TMC_FIELD STEPPER=extruder FIELD=freewheel VALUE=1
  # Set the max expected velocity to a value such that we are unlikely to switch to fullstepping except during a very fast retraction or prime
  SET_TMC_FIELD STEPPER=extruder FIELD=THIGH VELOCITY=50
  # Use CoolStep, but we need a certain step frequency for it to work
  SET_TMC_FIELD STEPPER=extruder FIELD=TCOOLTHRS VALUE=4000
  # But do switch to PWM autotuning when at high flow
  SET_TMC_FIELD STEPPER=extruder FIELD=TPWMTHRS VELOCITY=1
  # Allow the motor to freewheel when not in use, means it runs cooler
  SET_TMC_FIELD STEPPER=extruder FIELD=freewheel VALUE=1
  # Set the temperature prewarning to something reasonable. Cosmetic, Klipper does nothing with this
  SET_TMC_FIELD STEPPER=extruder FIELD=OVERTEMPPREWARNING_VTH VALUE=2885 # 7.7 * 100 C + 2038
  # The following is absolutely critical: set the overvoltage snubber to a sensible voltage.
  # This should be set to about 0.8 V above your power supply's idle voltage.
  # Your PSU voltage can be read from the TMC 2240 by issuing a GCODE command:
  # DUMP_TMC stepper=extruder register=ADC_VSUPPLY_AIN
  # The voltage is the value of adc_vsupply multiplied by 0.009732
  # It is also possible to use adc_vsupply + 82 here, which works out to be the same.
  {% set v = (24.7/0.009732)|int %}
  SET_TMC_FIELD STEPPER=extruder FIELD=OVERVOLTAGE_VTH VALUE={ v }

[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        configure_extruder
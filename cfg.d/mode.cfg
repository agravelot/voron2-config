[gcode_macro POWER_PROFILE_NORMAL]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.8
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.8
    AUTOTUNE_TMC STEPPER=stepper_x
    AUTOTUNE_TMC STEPPER=stepper_y

[gcode_macro POWER_PROFILE_PERFORMANCE]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.8
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.8
    AUTOTUNE_TMC STEPPER=stepper_x
    AUTOTUNE_TMC STEPPER=stepper_y

##### Acceleration #####
[gcode_macro SET_VELOCITY_LIMIT] # Set Velocity Limits 
rename_existing: _SET_VELOCITY_LIMIT
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% set rt = printer['gcode_macro _CLIENT_VARIABLE_RUNTIME'] %}
    {% set base_params = "" %}
    
    {% if rt.q_active == False %} # Normal behaviour
    
        {% if 'VELOCITY' in params %}
        {% set base_params = base_params ~ ' VELOCITY=' ~ params.VELOCITY %}
        {% endif %}
  
        {% if 'ACCEL' in params %}
          {% set adjusted_accel = params.ACCEL|int * client.accel_factor %}
          {% set base_params = base_params ~ ' ACCEL=' ~ adjusted_accel %}
        {% endif %}
        
        {% if 'MINIMUM_CRUISE_RATIO' in params %}
          {% set base_params = base_params ~ ' MINIMUM_CRUISE_RATIO=' ~ params.MINIMUM_CRUISE_RATIO %}
        {% endif %}
        
        {% if 'SQUARE_CORNER_VELOCITY' in params %}
          {% set base_params = base_params ~ ' SQUARE_CORNER_VELOCITY=' ~ params.SQUARE_CORNER_VELOCITY %}
        {% endif %}
    
    {% else %} # Qmode behaviour

        {% if 'VELOCITY' in params %}
          {% set base_params = (base_params ~ ' VELOCITY=' ~ [params.VELOCITY|int, client.q_max_velocity | int] | min | string) %}
        {% endif %}
        {% if 'ACCEL' in params %}
          {% set lim_accel = [(params.ACCEL | float * client.q_accel_factor)|int, client.q_max_accel | int] | min %}
          {% set base_params = (base_params ~ ' ACCEL=' ~ lim_accel | string) %}
        {% endif %}
        {% if 'SQUARE_CORNER_VELOCITY' in params %}
          {% set base_params = (base_params ~ ' SQUARE_CORNER_VELOCITY=' ~ [params.SQUARE_CORNER_VELOCITY|int, client.q_scv | int] | min | string) %}
        {% endif %}
        {% if 'MINIMUM_CRUISE_RATIO' in params %}
          {% set base_params = (base_params ~ ' MINIMUM_CRUISE_RATIO=' ~ [params.MINIMUM_CRUISE_RATIO|float, client.q_min_cruise | float] | max | string) %}
        {% endif %}
       
    {% endif %}

    _SET_VELOCITY_LIMIT {base_params}


[gcode_macro SET_ACCEL_FACTOR]
description: Scale acceleration value by factor
gcode: 
    {% set factor = params.FACTOR|default(1)|float %}
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    RESPOND TYPE=command MSG='Previous ACCEL FACTOR: {client.accel_factor}'
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=accel_factor VALUE={factor}
    RESPOND TYPE=command MSG='New ACCEL FACTOR: {factor}'

##### RUNTIME VARIABLES #####
[gcode_macro _CLIENT_VARIABLE_RUNTIME]

### LH Stinger Utility Variables    # Don't change manually! Internal utility variables used by macros. 
variable_required_version: 2.0
# variable_automeshed: False    # Used internally by other macros to track the autogenerated bed mesh.
variable_max_fan: 100 # Part of MAX_FAN
variable_manual_fan: -1 # Part of MAX_FAN
variable_manual_aux: -1 # Part of MAX_FAN
variable_fan_multiplier: 1.0 # Part of MAX_FAN
variable_q_active: False # Part of Qmode
variable_end_park: False # if toolhead was parked already at print end
gcode:

# https://github.com/lhndo/LH-Stinger/blob/main/Config/Klipper_Config/mymacros_code.cfg
# 
#### Quiet Modes #####
[gcode_macro Qmode]
variable_accel: 0
variable_velocity: 0
variable_square_corner_velocity: 0
variable_min_cruise: 0.0
variable_fan_value: 0.00
variable_fan_aux_value: 0.00
variable_fan2_value: 0.00
variable_speed_factor: 0
variable_is_aux_linked: True
variable_manual_aux: 0

gcode:
  {% set printer_state = printer.print_stats.state %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set rt = printer['gcode_macro _CLIENT_VARIABLE_RUNTIME'] %}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE_RUNTIME VARIABLE=q_active VALUE=1
  SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=accel VALUE={printer.toolhead.max_accel}
  SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=velocity VALUE={printer.toolhead.max_velocity}
  SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=square_corner_velocity VALUE={printer.toolhead.square_corner_velocity}
  SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=min_cruise VALUE={printer.toolhead.minimum_cruise_ratio}
  SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=speed_factor VALUE={printer.gcode_move.speed_factor}
  SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan_value VALUE={printer.fan.speed}
      # {% if client.has_aux_fan == True %}
      #   SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan_aux_value VALUE={printer['fan_generic aux'].speed}
      #   SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=is_aux_linked VALUE={client.link_aux}
      #   SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=manual_aux VALUE={rt.manual_aux}
      # {% endif %}
      
      # # Switch to Stealthchop 
      # {% if client.q_stealthchop|int == True %}
      #     SET_TMC_FIELD STEPPER=stepper_x FIELD=TPWMTHRS value=0
      #     SET_TMC_FIELD STEPPER=stepper_y FIELD=TPWMTHRS value=0
      #     SET_TMC_FIELD STEPPER=stepper_y1 FIELD=TPWMTHRS value=0
      #     SET_TMC_FIELD STEPPER=stepper_z FIELD=TPWMTHRS value=0
      #     SET_TMC_FIELD STEPPER=stepper_z1 FIELD=TPWMTHRS value=0
      # {% endif %}
      
      # Set Motion Parameters
  M220 S{client.q_feedrate} #set feedrate
  RESPOND MSG="Feedrate: {client.q_feedrate}"
  SET_VELOCITY_LIMIT VELOCITY={client.q_max_velocity} ACCEL={client.q_max_accel} SQUARE_CORNER_VELOCITY={client.q_scv} MINIMUM_CRUISE_RATIO={client.q_min_cruise}
  RESPOND MSG="Finished Setting Motion Parameters"

      # Set Fan Parameters
      # MAX_FAN MAX_FAN={client.q_fan_max}  
  
      # Set AUX Fan Parameters
      # MAX_FAN LINK_AUX={client.q_link_aux}
      # MAX_FAN MANUAL_AUX={client.q_fan_aux}
  RESPOND TYPE=command MSG='Quiet Mode Active'

    

[gcode_macro Qmode_exit]
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set rt = printer['gcode_macro _CLIENT_VARIABLE_RUNTIME'] %}
    
  {% if rt.q_active == True %}
      # disable else SET_VELOCITY_LIMIT will be capped
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE_RUNTIME VARIABLE=q_active VALUE=False
      SET_VELOCITY_LIMIT ACCEL={printer['gcode_macro Qmode'].accel} VELOCITY={printer['gcode_macro Qmode'].velocity} SQUARE_CORNER_VELOCITY={printer['gcode_macro Qmode'].square_corner_velocity}
      SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer['gcode_macro Qmode'].min_cruise}
      M220 S{printer['gcode_macro Qmode'].speed_factor * 100}

      # Restore Fan Values
      # MAX_FAN MAX_FAN=100
      # M106 S{printer['gcode_macro Qmode'].fan_value*255}
      # {% if client.has_aux_fan == True %}
      #   MAX_FAN LINK_AUX={printer['gcode_macro Qmode'].is_aux_linked}
      #   MAX_FAN MANUAL_AUX={printer['gcode_macro Qmode'].manual_aux}
      #   M106 P2 S{printer['gcode_macro Qmode'].fan_aux_value*255}
      # {% endif %}

      # Switch to Spreadcycle - Use with TMC 2240 only
      # {% if client.q_stealthchop|int == True %}
      #     SET_TMC_FIELD STEPPER=stepper_x FIELD=TPWMTHRS value=1048575
      #     SET_TMC_FIELD STEPPER=stepper_y FIELD=TPWMTHRS value=1048575
      #     SET_TMC_FIELD STEPPER=stepper_y1 FIELD=TPWMTHRS value=1048575
      #     SET_TMC_FIELD STEPPER=stepper_z FIELD=TPWMTHRS value=1048575
      #     SET_TMC_FIELD STEPPER=stepper_z1 FIELD=TPWMTHRS value=1048575
      # {% endif %}
      
      RESPOND TYPE=command MSG='Quiet Mode Disabled'
      
  {% endif %}

